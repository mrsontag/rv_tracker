{"version":3,"sources":["components/createnew.js","components/showall.js","components/showone.js","App.js","serviceWorker.js","index.js"],"names":["CreateNew","props","useState","manufacturer","setManufacturer","brand","setBrand","model","setModel","year","setYear","onSubmit","e","preventDefault","Axios","post","then","res","console","log","data","catch","err","type","name","value","onChange","target","ShowAll","rvs","setRvs","useEffect","get","response","length","map","rv","index","key","to","_id","ShowOne","setRv","id","App","className","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yQAiCeA,EA7BG,SAAAC,GAAU,IAAD,EACkBC,mBAAS,IAD3B,mBAChBC,EADgB,KACFC,EADE,OAEGF,mBAAS,IAFZ,mBAEhBG,EAFgB,KAETC,EAFS,OAGIJ,mBAAS,IAHb,mBAGhBK,EAHgB,KAGTC,EAHS,OAIEN,mBAAS,MAJX,mBAIhBO,EAJgB,KAIVC,EAJU,KAkBvB,OACI,0BAAMC,SAbS,SAACC,GAChBA,EAAEC,iBACFC,IAAMC,KAAK,qCAAsC,CAC7CZ,aAAcA,EACdE,MAAOA,EACPE,MAAOA,EACPE,KAAMA,IAETO,MAAK,SAACC,GAAD,OAAQC,QAAQC,IAAIF,EAAIG,SAC7BC,OAAM,SAACC,GAAD,OAASJ,QAAQC,IAAIG,QAKxB,2BAAOC,KAAK,OAAOC,KAAK,eAAeC,MAAQtB,EAAeuB,SAAU,SAACd,GAAD,OAAOR,EAAgBQ,EAAEe,OAAOF,UACxG,2BAAOF,KAAK,OAAOC,KAAK,QAAQC,MAAQpB,EAAQqB,SAAU,SAACd,GAAD,OAAON,EAASM,EAAEe,OAAOF,UACnF,2BAAOF,KAAK,OAAOC,KAAK,QAAQC,MAAQlB,EAAQmB,SAAU,SAACd,GAAD,OAAOJ,EAASI,EAAEe,OAAOF,UACnF,2BAAOF,KAAK,OAAOC,KAAK,OAAOC,MAAQhB,EAAOiB,SAAU,SAACd,GAAD,OAAOF,EAAQE,EAAEe,OAAOF,UAChF,4BAAQF,KAAK,UAAb,YCCGK,EAxBC,SAAA3B,GAAU,IAAD,EACEC,mBAAS,IADX,mBACd2B,EADc,KACTC,EADS,KAYrB,OAVAC,qBAAU,WACNb,QAAQC,IAAI,uBACZL,IAAMkB,IAAI,6BACLhB,MAAK,SAAAiB,GACFf,QAAQC,IAAIc,EAASb,MACrBU,EAAOG,EAASb,SAEnBC,OAAM,SAAAC,GAAG,OAAIJ,QAAQC,IAAIG,QAC/B,IAGC,iEAEI,4BACKO,EAAIK,OAAS,GAAKL,EAAIM,KAAI,SAACC,EAAIC,GAC5B,OAAQ,wBAAIC,IAAKD,GAAO,kBAAC,IAAD,CAAME,GAAI,QAAUH,EAAGI,KAAMJ,EAAGjC,aAAe,IAAMiC,EAAG/B,MAAQ,IAAM+B,EAAG7B,MAAQ,KAAO6B,EAAG3B,KAAO,YCC/HgC,EAlBC,SAAAxC,GAAU,IAAD,EACDC,mBAAS,IADR,mBACdkC,EADc,KACVM,EADU,KAQrB,OANAX,qBAAU,WACNjB,IAAMkB,IAAI,iCAAmC/B,EAAM0C,IAC9C3B,MAAK,SAAAC,GAAG,OAAIyB,EAAMzB,EAAIG,SACtBC,OAAM,SAAAC,GAAG,OAAIJ,QAAQC,IAAIG,QAC/B,IAGC,6BACI,4BACI,sCAAac,EAAG7B,MAAhB,KACA,6CAAoB6B,EAAGjC,aAAvB,QCCDyC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,CAASC,KAAK,MACd,kBAAC,EAAD,CAASA,KAAK,aACd,kBAAC,EAAD,CAAWA,KAAK,YCDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAyC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.4bc2c7c0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { navigate } from '@reach/router';\r\nimport Axios from 'axios';\r\n\r\nconst CreateNew = props => {\r\n    const [manufacturer, setManufacturer ] = useState(\"\");\r\n    const [brand, setBrand] = useState(\"\");\r\n    const [model, setModel ] = useState(\"\");\r\n    const [year, setYear ] = useState(2020);\r\n    \r\n    const submitForm = (e) => {\r\n        e.preventDefault();\r\n        Axios.post(\"http://localhost:8000/api/rvs/new/\", {\r\n            manufacturer: manufacturer,\r\n            brand: brand,\r\n            model: model,\r\n            year: year\r\n        })\r\n        .then((res)=> console.log(res.data))\r\n        .catch((err) => console.log(err));\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ submitForm }>\r\n            <input type=\"text\" name=\"manufacturer\" value={ manufacturer } onChange={(e) => setManufacturer(e.target.value)} />\r\n            <input type=\"text\" name=\"brand\" value={ brand } onChange={(e) => setBrand(e.target.value)} />\r\n            <input type=\"text\" name=\"model\" value={ model } onChange={(e) => setModel(e.target.value)} />\r\n            <input type=\"text\" name=\"year\" value={ year } onChange={(e) => setYear(e.target.value)} />\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default CreateNew;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport { Link } from '@reach/router';\r\n\r\n\r\nconst ShowAll = props => {\r\n    const [rvs, setRvs ] = useState([]);\r\n    useEffect(() => {\r\n        console.log(\"Ran the use effect!\");\r\n        Axios.get(\"http://127.0.0.1/api/rvs/\")\r\n            .then(response => {\r\n                console.log(response.data);\r\n                setRvs(response.data);\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, []);\r\n    \r\n    return (\r\n        <div>\r\n            This should show all, ultimately.\r\n            <ul>\r\n                {rvs.length > 0 && rvs.map((rv, index)=>{\r\n                    return (<li key={index}><Link to={\"/rvs/\" + rv._id}>{rv.manufacturer + \" \" + rv.brand + \" \" + rv.model + \" (\" + rv.year + \")\"}</Link></li>)\r\n                })}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ShowAll;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\n// import { navigate } from '@reach/router';\r\n\r\n\r\nconst ShowOne = props => {\r\n    const [rv, setRv] = useState({}); \r\n    useEffect(() => {\r\n        Axios.get(\"http://localhost:8000/api/rvs/\" + props.id)\r\n            .then(res => setRv(res.data))\r\n            .catch(err => console.log(err));\r\n    }, []);\r\n    \r\n    return (\r\n        <div>\r\n            <ul>\r\n                <li>Model: { rv.model } </li>\r\n                <li>Manufacturer: { rv.manufacturer } </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ShowOne;\r\n","import React from 'react';\nimport { Router } from '@reach/router';\nimport './App.css';\nimport CreateNew from \"./components/createnew\";\nimport ShowAll from \"./components/showall\";\nimport ShowOne from \"./components/showone\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <ShowAll path=\"/\" />\n        <ShowOne path=\"/rvs/:id\" />\n        <CreateNew path=\"/new\" />\n      </Router>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}